			
	what is the difference between virtualization and containerization
	=====================================================================
	Virtualization enables you to run multiple operating systems on the 
	hardware of a single physical server, while containerization enables 
	you to deploy multiple applications using the same operating system 
	on a single virtual machine.
	
	what is docker and docker hub
	-===========================
	docker
	------
	Docer is a set of platform as a service products that use OS-level 
	virualization to deliver software in packages called containers. 
	Conainers are isolated from one another and bundle their own software, 
	libaries and configuration files; they can communicate with each other 
	thrugh well-defined channels
	
	docker hub
	-----------
	Docer Hub is a repository in which Docker users and partners create, 
	tes, store and distribute container images. 
	Repository can be docker hub , private docker repository , nexus , jfrog , s3
	
	what is platform as service
	==================================
	platform as service allow customers to develop, run, and manage applications 
	without the complexity of building and maintaining the infrastructure typically 
	associated with developing and launching an app.
	
	########## create user for docker
	
	useradd docuser
	passwd docuser			############## suman345
	usermod -a -G wheel docuser   ####### add user as sudo user in centos7
	su  - docuser
	
	#########  update the installed package 
	
	[docuser@jenkinslave1 ~]$ sudo yum update -y
	[docuser@jenkinslave1 ~]$ sudo yum install net-tools -y
	#########  install docker
	
	[docuser@jenkinslave1 ~]$ sudo yum install docker -y
	[docuser@jenkinslave1 ~]$ sudo service docker start
	[docuser@jenkinslave1 ~]$ sudo groupadd docker
	[docuser@jenkinslave1 ~]$ sudo usermod -a -G docker docuser  # By adding the user in docker group we no need to use sudo every time.
	[docuser@jenkinslave1 ~]$ sudo reboot
	[docuser@jenkinslave1 ~]$ docker --version
	[docuser@jenkinslave1 ~]$ sudo service docker start
	
	
	How to enable docker API
	===============================
	
	sudo vi /etc/sysconfig/docker
	
			OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false -H tcp://0.0.0.0:12375 -H unix:///var/run/docker.sock'
	
	
	sudo systemctl daemon-reload
	
	sudo service docker restart
		                                                    
	sudo systemctl enable firewalld                         For K8 dont execute this
	                                                        
	sudo systemctl start firewalld                          For K8 dont execute this
	                                                        
	sudo firewall-cmd --permanent --add-port=12375/tcp      For K8 dont execute this
	                                                        
	sudo firewall-cmd --reload                              For K8 dont execute this
	                                                        
	sudo firewall-cmd --list-all                            For K8 dont execute this
		sudo curl 192.168.33.45:12375/images/json           For K8 dont execute this
	                                                        
		sudo curl 192.168.33.45:12375/version               For K8 dont execute this
	docker ps
	
	
	
	############ what is docker info
	==============================================
	[docuser@jenkinslave1 ~]$ docker info
			Docker info provides the information about below
			no of docker container  
			no of docker images running in local 
			version of docker
			storage driver
			file system 
			what is the network docker is using etc...
	
	Wha is docker image
	==========================
	
	Docker image is a file comprised of multiple layers, used to 
	exeute code in a Docker container. Docker image include system 
	libaries, tools, and other files and dependencies for the executable 
	cod. 
	In other word A Docker Image is a template of instructions which 
	is sed to create containers.
	docker image is created using "docker build" command.
	Docker image has multiple layers.
	
	Wha is docker container
	===========================
	
	Containers are lightweight protable encapsulation of an environment
	in hich we run our application.
	
	containers are created from the images. Inside the container we have 
	allthe binaries and dependencies which we need to run an application.
	
	Wha is tag in docker image
	================================
	The tag in docker image indecate the version of the particular image.
	
	
	howto check what are the images present in local.
	==================================================
	docker images
	
	chek or search for publicly available images from docker hub
	=============================================================
	ex -- search for java ---> docker search java
	
	Howto download the image from docker hub ( download public images)
	=========================================
	docker pull image_name
	ex -- docker pull docker.io/jpetazzo/clock  (pull clock image)
	
	If we will not mention any version or tag docker always pullthe 
	latst version.
	
	Howto run Docker image
	==============================
	docker run -it --name myContenerName dockerImageFile
	
	whee -i is the input and  -t is the output terminal
	
	EX -> docker run -it --name myClock docker.io/jpetazzo/clock
	
	Howto check the running container
	======================================
	docker  ps
	
	howto check the running and stoped containers
	==============================================
	docker ps -a
	
	[douser@jenkinslave1 ~]$ docker ps -a
	CONAINER ID        IMAGE             COMMAND            CREATED          STATUS              PORTS            NAMES
	451626bf9d3        docker.io/jpetazzo/clock   "/bin/sh -c 'while..."   2 minutes ago       Exited (130) 2 minutes ago              myClock
	[douser@jenkinslave1 ~]$  
	
	
	when we login to container we need containerID or containerName
	
	Howto run the docker container background
	============================================
	
	docker run -d --name myContenerName dockerImageFile
	
	here  -d option is use to run the container in background.
	
	docker run -d --name myClock1 docker.io/jpetazzo/clock
	
	
	Howto check the containerIDs 
	=============================
	docker ps -q  
	
	howto check all running and stoped containerIDs
	===================================================
	docker ps -aq
	
	howto check the latest running containerID
	==============================================
	docker ps -l
	
	
	Howto check the log of the containerID
	================================================
	docker logs containerID
	
	howto check the running log of the containerID
	====================================================
	docker logs -f containerID
	
	howto list all stoped container
	==================================
	docker ps -a | grep -i exited
	
	howto list all running container
	==================================
	docker ps -a | grep -i up
	
	howto remove or delete stoped container
	===============================================
	get the stoped containerID 
	
	docker ps -a | grep -i exit 
	
	the remove containerID
	
	docker rm  containerID1  containerID2  containerID3 ....
	
	EX -> 
	[douser@jenkinslave1 ~]$ docker ps -a | grep -i exit  | awk '{print $1}'
	b47ab120cbf
	451626bf9d3
	[douser@jenkinslave1 ~]$
	[douser@jenkinslave1 ~]$ docker rm b47dab120cbf 4510626bf9d3
	b47ab120cbf
	451626bf9d3
	[douser@jenkinslave1 ~]$ docker ps -a | grep -i exit  | awk '{print $1}'
	[douser@jenkinslave1 ~]$
	
	
	Howto delete the image
	======================================
	getimageID from " docker images  " command
	the execute  "	docker rmi -f imageID1 imageID2 .....  "
	
	whee   rmi  is stands for remove and  -f is forcefully
	
	ex --->  
	[douser@jenkinslave1 ~]$ docker images
	REPSITORY              TAG              IMAGE ID         CREATED          SIZE
	docer.io/jpetazzo/clock   latest           59e5463e3307        2 months ago        1.22 MB
	docer.io/hello-world      latest           fce289e99eb9        13 months ago       1.84 kB
	[douser@jenkinslave1 ~]$
	
	[douser@jenkinslave1 ~]$ docker rmi fce289e99eb9
	Untgged: docker.io/hello-world:latest
	Untgged: docker.io/hello-world@sha256:9572f7cdcee8591948c2963463447a53466950b3fc15a247fcad1917ca215a2f
	Delted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e
	Delted: sha256:af0b15c8625bb1938f1d7b17081031f649fd14e6b233688eea3c5483994a66a3
	[douser@jenkinslave1 ~]$
	
	howto run a web application 
	=======================================
	
	Lets pull the web application 
	
		docker pull tutum/hello-world
	
	check the image 
	
		docker images
	
	Run the web application or container
	
	When run is fourground
	
		docker run -it -p outBoundPort:inBoundPort  --name containerName  imageName
		
	when run in background
	
		docker run -d -p outBoundPort:inBoundPort --name containerName  imageName
		
	ex -->   running in fourground  and press  crtl+pq  to come out from terminal without stoping the job
	
	docker run  -it -p 8080:80 --name webhello1 docker.io/tutum/hello-world
	
		running in background
		
	docker run  -d -p 8080:80 --name webhello docker.io/tutum/hello-world
			
	If e will not provide outBoundPort port then docker will allocate one outBoundPort.
	
	docker run  -d -p 80 --name webhello1 docker.io/tutum/hello-world
	
	how to get the outBoundPort
	-----------------------------
	step 1 -- get the containerID 
		
		docker ps -a 
	
	[docuser@jenkinslave1 ~]$ docker ps -a
		CONTAINER ID        IMAGE                COMMAND            CREATED          STATUS           PORTS             NAMES
		04b494b7c96f        docker.io/tutum/hello-world   "/bin/sh -c 'php-f..."   39 minutes ago      Up 39 minutes       0.0.0.0:8080->80/tcp    webhello
		d7bbfe5bf83b        docker.io/tutum/hello-world   "/bin/sh -c 'php-f..."   52 minutes ago      Up 52 minutes       0.0.0.0:32768->80/tcp   webhello1
		6163628ab2f4        docker.io/jpetazzo/clock      "/bin/sh -c 'while..."   14 hours ago        Up 14 hours                     myClock1
	[docuser@jenkinslave1 ~]$
	
	step 2 -- Get the allocated external port
	
		docker port containerID  inBoundPort
		
		[docuser@jenkinslave1 ~]$ docker port d7bbfe5bf83b  80
			0.0.0.0:32768
		[docuser@jenkinslave1 ~]$
	
	step 3 --- use browser ( google crome ) with external port
	
		ipAddress:externalPort
		
		192.168.33.97:32768
		
	Howto login to running docker container
	====================================
	docker exec -it  containerID  containerShell
	
	[docuser@jenkinslave1 ~]$ docker ps -a
		CONTAINER ID        IMAGE                COMMAND            CREATED          STATUS           PORTS             NAMES
		b3d33cfbf21c        docker.io/tutum/hello-world   "/bin/sh -c 'php-f..."   51 seconds ago      Up 49 seconds       0.0.0.0:8080->80/tcp    webhello
		d7bbfe5bf83b        docker.io/tutum/hello-world   "/bin/sh -c 'php-f..."   59 minutes ago      Up 59 minutes       0.0.0.0:32768->80/tcp   webhello1
		6163628ab2f4        docker.io/jpetazzo/clock      "/bin/sh -c 'while..."   14 hours ago        Up 14 hours                     myClock1
	[docuser@jenkinslave1 ~]$
	[docuser@jenkinslave1 ~]$ docker exec -it  d7bbfe5bf83b  /bin/sh
		/ #
	
	Runubuntu using docker hub
	===================================
	
	[douser@jenkinslave1 ~]$ docker run -it --name myUbuntu docker.io/ubuntu
	
	roo@390bfe8b102b:/#			# we are in ubuntu operating system
	
	roo@390bfe8b102b:/# ls
	bin boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	roo@390bfe8b102b:/#
	roo@390bfe8b102b:/#
	
	roo@390bfe8b102b:/# apt-get update			# update ubuntu
	
	Get1 http://archive.ubuntu.com/ubuntu bionic InRelease [242 kB]
	Get2 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]
	:
	:
	Get18 http://archive.ubuntu.com/ubuntu bionic-backports/main amd64 Packages [2496 B]
	Fethed 17.4 MB in 45s (385 kB/s)
	Reaing package lists... Done
	roo@390bfe8b102b:/#
	
	
	
	roo@390bfe8b102b:/# apt-get install figlet   # installing figlet package
	
	Reaing package lists... Done
	Buiding dependency tree
	Reaing state information... Done
	Thefollowing NEW packages will be installed:
	
	roo@390bfe8b102b:/# figlet sumanta
						_
	___ _   _ _ __ ___   __ _ _ __ | |_ __ _
	/ _| | | | '_ ` _ \ / _` | '_ \| __/ _` |
	\__\ |_| | | | | | | (_| | | | | || (_| |
	|__/\__,_|_| |_| |_|\__,_|_| |_|\__\__,_|
	
	roo@390bfe8b102b:/#
	
	Buiding your own docker image
	=================================
	we can build our own docker image in two ways 
		1) using docker commit 
		2) using docker file
	
	Howto create docker image using docker commit
				or
	Howto create custome docker container
				or
	Ex -: My requrement is  an ubuntu docker image with figlet software
	==============================================================================
	runubuntu docker image
		docker run -it --name myUbuntu docker.io/ubuntu  /bin/bash
	Insde ubuntu 
		apt-get update
		apt-get install figlet
	pres ctrl+pq come out from the container without teminating the session
	
	[douser@jenkinslave1 ~]$ docker ps
	CONTAINER ID        IMAGE             COMMAND            CREATED          STATUS           PORTS            NAMES
	390bfe8b102b        docker.io/ubuntu        "/bin/bash"           12 hours ago        Up 12 hours                    myUbuntu
	
	# dcker commit -m "comment is figlet ubuntu" -a "authorSumanta" containerID custome_container_Name
	
	docer commit -m "comment is figlet ubuntu" -a "authorSumanta" 390bfe8b102b figlet_ubuntu
	
	we an see the custome image  " figlet_ubuntu "
	
	[douser@jenkinslave1 ~]$ docker images
	REPSITORY              TAG              IMAGE ID         CREATED          SIZE
	figet_ubuntu              latest           370357d81b0f        42 seconds ago      93.6 MB
	docer.io/ubuntu           latest           ccc6e87d482b        2 weeks ago      64.2 MB
	
	Nowwe can run out custome image
	
	[douser@jenkinslave1 ~]$ docker run -it --name figletUbuntu figlet_ubuntu
	
	roo@2eb0085bd190:/#						Now we are inside figlet_ubuntu container 
	roo@2eb0085bd190:/# figlet sumanta
						_
	___ _   _ _ __ ___   __ _ _ __ | |_ __ _
	/ _| | | | '_ ` _ \ / _` | '_ \| __/ _` |
	\__\ |_| | | | | | | (_| | | | | || (_| |
	|__/\__,_|_| |_| |_|\__,_|_| |_|\__\__,_|
	
	roo@2eb0085bd190:/#
	
	
	
	Howto stop the container
	============================
	docker stop containerID
	docker kill containerID
	
	wha is docker hub
	-===========================
	Docer Hub is a repository in which Docker users and partners create, 
	tes, store and distribute container images. 
	Repository can be docker hub , private docker repository , nexus , jfrog , s3
	
	Creting a Docker Hub account
	===================================
	Login to "https://hub.docker.com/" , if you donot have account then create one.
	
	To ogin docker from unix box we can user below command
	
	sud docker login     or      docker login
	
	howto push image to docker hub
	======================================
	[douser@jenkinslave1 ~]$ docker login
	Logn with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
	Usename: sksumanta
	Pasword:  Suman@345
	Logn Succeeded
	[douser@jenkinslave1 ~]$
	
	ste 2---> we need sksumanta/ubuntu_with_figlet:version1 to push into docker hub 
	
	[douser@jenkinslave1 ~]$ docker tag   figlet_ubuntu   sksumanta/ubuntu_with_figlet:version1
	
	[douser@jenkinslave1 ~]$ docker images
	
	REPSITORY            TAG              IMAGE ID         CREATED          SIZE
	figet_ubuntu            latest           370357d81b0f        7 hours ago      93.6 MB
	sksmanta/ubuntu_with_figlet   version1         370357d81b0f        7 hours ago      93.6 MB
	
	ste 3 ---> now push the image to docker hub
	
	[docuser@jenkinslave1 ~]$ docker push sksumanta/ubuntu_with_figlet:version1
		The push refers to a repository [docker.io/sksumanta/ubuntu_with_figlet]
		35c2c45611cb: Pushed                     
	
	ste 4 ---> Lets remove the image and pull the image
	
	docker rmi -f 370357d81b0f			# remove the image using imageID
	
	docker pull  sksumanta/ubuntu_with_figlet:version1  # pull the image from docker hub
	
	
	
	crete custome image using dockerfile
	============================================
	[docuser@jenkinslave1 ~]$ mkdir javaapp
	[docuser@jenkinslave1 ~]$ cd javaapp/
	[docuser@jenkinslave1 javaapp]$ ls  -lrt
	total 0
	[docuser@jenkinslave1 javaapp]$ vi helloWorld.java
	
		class helloWorld
			{
			public static void main(String args[])
				{
			System.out.println("Hello Devops");
			System.out.println("Reading Docker");
			System.out.println("Docker Container");
			}
		}
	
	[docuser@jenkinslave1 javaapp]$ vi Dockerfile
		FROM openjdk:8
		COPY helloWorld.java .
		RUN javac helloWorld.java
		CMD ["java","helloWorld"]
	[docuser@jenkinslave1 javaapp]$
	
	belw command to create custome image using dockerfile 
	
	docuser@jenkinslave1 javaapp]$ docker build -t javaapp:v1 .   { . is the path where dockerfile present }
	
	Onc custome image created we can check it by using
	[docuser@jenkinslave1 javaapp]$ docker images
		REPOSITORY                   TAG              IMAGE ID         CREATED           SIZE
		javaapp            v1            e47cbe4c7b4c        About a minute ago   488 MB
	
	Nowwe can run the docker image
	[docuser@jenkinslave1 javaapp]$ docker run -it --name javaapp1 javaapp:v1
		Hello Devops
		Reading Docker
		Docker Container 
	[docuser@jenkinslave1 javaapp]$
	
	Nowpush the custome image to ducker hub
	
	[docuser@jenkinslave1 javaapp]$ docker tag  javaapp:v1  sksumanta/simple_javaapp:v1
	[docuser@jenkinslave1 javaapp]$ docker images
		REPOSITORY               TAG              IMAGE ID         CREATED          SIZE
		javaapp                   v1            e47cbe4c7b4c        12 hours ago    488 MB
		sksumanta/simple_javaapp  v1            e47cbe4c7b4c        12 hours ago    488 MB
		
	[docuser@jenkinslave1 javaapp]$ docker push sksumanta/simple_javaapp:v1
		The push refers to a repository [docker.io/sksumanta/simple_javaapp]
		aa8ecd0ac8e8: Pushing [====================================>] 4.608 kB                                              
		376ca5eb1898: Pushing [====================================>] 2.048 kB
		
	
	
	Whywe need docker volume
	===================================
	As docker is a container based application, so our application will be 
	runing inside the container. The logs and output data of the application will 
	be tored inside the container. Once container complete its work it will be 
	cloed or if we have some problem and we killed the container then stored data 
	wil be lost. That case we can not find log file to troubleshoot and generated 
	dat will not found for the input to other application. 
	So we need a mount point where we can store our logfile and data for the 
	appication.
	
	Docker volume can be created at the same time when container is created.
	Or ocker volume can be created independently and then attached to the container.
	
	
	howto create independent docker volume
	============================================
	
	[douser@jenkinslave1 ~]$ docker volume create --name myDocVolume
	myDocVolume
	[douser@jenkinslave1 ~]$
	
	Howto list the docker volume
	==================================
	[douser@jenkinslave1 ~]$ docker volume ls
	DRIVER              VOLUME NAME
	local               myDocVolume
	[douser@jenkinslave1 ~]$
	
	Howto mount the volume
	============================
	To ount the volume we need to use  -v  option.
	The -v option requires the name of the volume , a colon , then the 
	abslute path where the volume should appear inside the container.
	
	If he absolute path dose not exist then it will be created 
	els the mounted volume will hide the existing content.
	
	The--rm  flag will delete the container when we exit
	
	[docuser@jenkinslave1 ~]$ docker run -it  --rm   -v  myDocVolume:/newMountDir  docker.io/ubuntu:version1
		root@f1535cd36b9d:/# pwd
		/
		root@f1535cd36b9d:/#	
		root@f1535cd36b9d:/#
		root@f1535cd36b9d:/# ls  -l
		total 4
		drwxr-xr-x.   2 root root 4096 Jan 12 21:10 bin
		drwxr-xr-x.   2 root root    6 Apr 24  2018 boot
		drwxr-xr-x.   2 root root    6 Feb  6 02:40 newMountDir
	
	Let write some data into the volume
	========================================
	root@f1535cd36b9d:/# echo "This is the sample data within the container" > /newMountDir/sample.txt
	root@f1535cd36b9d:/#
	root@f1535cd36b9d:/# cat /newMountDir/sample.txt
		This is the sample data within the container
	root@f1535cd36b9d:/#
	
	whe we exit from the container the containerID will remove
	dueto  --rm  flag
	
	roo@f1535cd36b9d:/# exit
	exi
	[douser@jenkinslave1 ~]$ docker ps -a
	CONAINER ID        IMAGE          COMMAND         CREATED             STATUS              PORTS               NAMES
	[douser@jenkinslave1 ~]$
	
	Wha is docker inspect
	=============================
	docker inspect give the lowlevel information about a docker image or container
	or olume.
	
	docker inspect container-id 
	
	Howto verify the volume is present in our system 
	===================================================
	docker  volume  inspect  volume_name
	
	[docuser@jenkinslave1 ~]$
	[docuser@jenkinslave1 ~]$ docker volume inspect myDocVolume
	[
		{
			"Driver": "local",
			"Labels": {},
			"Mountpoint": "/var/lib/docker/volumes/myDocVolume/_data",
			"Name": "myDocVolume",
			"Options": {},
			"Scope": "local"
		}
	]
	[docuser@jenkinslave1 ~]$
	
	
	
	Let start a new container and attach the existing volume
	================================================================	
	
	[docuser@jenkinslave1 ~]$
	[docuser@jenkinslave1 ~]$ docker run  -it --rm -v myDocVolume:/myNewDir   docker.io/ubuntu
	
	root@4bfefae82322:/#
	
	root@4bfefae82322:/# ls
	bin  boot  dev  etc  home  lib  lib64  media  mnt  myNewDir  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	
	root@4bfefae82322:/# cd myNewDir/
	
	Let verify the content
	
	root@4bfefae82322:/myNewDir# ls
	sample.txt
	
	root@4bfefae82322:/myNewDir# cat sample.txt
	This is the sample data within the container
	
	root@4bfefae82322:/myNewDir#
	root@4bfefae82322:/myNewDir# 
	
	Howto  Create a volume that persists when the container is removed
	=============================================================================================
	[docuser@jenkinslave1 ~]$ docker run -it -v mydocVol1:/myDir  --name=container1 docker.io/ubuntu
		root@47d4a7af4d0a:/#
	
	myDcVol1 is a volume create and mounted to  myDir when container is  created.
	
	Howto start the stoped container
	===================================
	[docuser@jenkinslave1 ~]$ docker ps -a
	CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
	47d4a7af4d0a        docker.io/ubuntu    "/bin/bash"         8 minutes ago       Exited (0) 9 seconds ago                       container1
	[docuser@jenkinslave1 ~]$
	
	whe we start the stoped container the volume will mounted automatically
	
	[docuser@jenkinslave1 ~]$ docker start -ai 47d4a7af4d0a
	
	root@47d4a7af4d0a:/#
	root@47d4a7af4d0a:/# ls
		bin  boot  dev  etc  home  lib  lib64  media  mnt  myDir  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	root@47d4a7af4d0a:/# cd myDir/
	root@47d4a7af4d0a:/myDir# ls
		sample.txt
	root@47d4a7af4d0a:/myDir# cat sample.txt
		This is the sample data within the container
	
	root@47d4a7af4d0a:/myDir#
	
	or e can user below command to start the container
	
	[docuser@jenkinslave1 ~]$ docker start 47d4a7af4d0a
	47d4a7af4d0a
	[docuser@jenkinslave1 ~]$
	[docuser@jenkinslave1 ~]$ docker exec -it 47d4a7af4d0a bash
	root@47d4a7af4d0a:/#
	root@47d4a7af4d0a:/#
	
	
	Howto remove the volume
	===============================
	[docuser@jenkinslave1 ~]$ docker volume rm mydocVol1
	Error response from daemon: Unable to remove volume, volume still in use: remove mydocVol1: volume is in use - [47d4a7af4d0afc48c5fb0f24ea56ad54139035e257b37a522404bcc27a11dc0a]
	[docuser@jenkinslave1 ~]$
	
	Theerror indicates container-id is using the volume. So we need to stop and remove
	thecontainer first before removing the volume. or we can remove the volume forcefully
	usig  -f  option.
	
	[docuser@jenkinslave1 ~]$ docker volume rm -f mydocVol1   # the volume has been removed
		mydocVol1 
	[docuser@jenkinslave1 ~]$
	
	Lis the volumes
	[docuser@jenkinslave1 ~]$ docker volume ls
		DRIVER              VOLUME NAME
		local               myDocVolume
	
	Chek the mount point is removed and no longer available.
	
	[docuser@jenkinslave1 ~]$ docker exec 47d4a7af4d0a bash -c "ls -la /myDir"
		total 0
	[docuser@jenkinslave1 ~]$
	
	
	Creting a volume from an existing directory with data.
	============================================================
	If we create a volume and provide a directory path which contain data
	at he time of creating container then the data will be copied into the volume.
	
	[docuser@jenkinslave1 ~]$ docker run -it --rm -v myDatVol:/var docker.io/ubuntu   # /var has data 
	root@d0ebc7d95bab:/# cd var
	root@d0ebc7d95bab:/var# ls
		backups  cache  lib  local  lock  log  mail  opt  run  spool  tmp
	
	if e exit from the container and create a new container with existing volume 
	we ill find the data present in the volume.
	
	[docuser@jenkinslave1 ~]$ docker run -it --rm -v myDatVol:/newVar docker.io/ubuntu
	root@157322241b2a:/# cd newVar/
	root@157322241b2a:/newVar# ls
		backups  cache  lib  local  lock  log  mail  opt  run  spool  tmp
	root@157322241b2a:/newVar#
	
	
	Howto share data between the container
	=================================================
		docker run -it --name=newcontainerName  --volumes-from  oldcontainerName   imageName
	
	Ste1
	-----		
	docker run -it  --name=myOldContainer -v myOldVolume:/shareDir docker.io/ubuntu
	root@adf3e35bba63:/# cd shareDir/
	root@adf3e35bba63:/shareDir# echo  "share data between the container" > example.txt
	root@adf3e35bba63:/shareDir# exit
	ste2
	-----
	[docuser@jenkinslave1 ~]$ docker run -it --rm --name=mynewContainer --volumes-from myOldContainer docker.io/ubuntu
	root@c137c112e221:/# ls
	bin   dev  home  lib64  mnt  proc  run   shareDir  sys  usr
	boot  etc  lib   media  opt  root  sbin  srv       tmp  var
	root@c137c112e221:/# cd shareDir/
	root@c137c112e221:/shareDir# ls
	example.txt
	root@c137c112e221:/shareDir# cat example.txt
	share data between the container
	root@c137c112e221:/shareDir#
	
	
	Wha is bind mount a volume
	============================
	A bind mount volume is a file or folder stored anywhere in the host machine
	andmounted into a running container. At the host, if we modify any content in 
	fil or folder then it will affect inside the container.
	
	docker run -it -v /volume_name/folder_name:/container_folder_path  imageName
	
	[douser@jenkinslave1 ~]$  
	docker run -it -v /home/docuser/bindMountVolume/docFolder:/containerFolder:z docker.io/ubuntu
	
	The ":z" can be used when host machine and container machine having difference operating system.
	
	root@32bbd77afebe:/#
	root@32bbd77afebe:/# echo " file created inside the container and line added " > /containerFolder/fil
	e1.txt
	root@32bbd77afebe:/#
	root@32bbd77afebe:/# cd containerFolder/
	root@32bbd77afebe:/containerFolder# cat file1.txt
		file created inside the container and line added
	root@32bbd77afebe:/containerFolder#
	root@32bbd77afebe:/containerFolder# exit
	
	Nowlets modify the file in host machine
	
	[docuser@jenkinslave1 ~]$ cd /home/docuser/bindMountVolume/docFolder
	[docuser@jenkinslave1 docFolder]$ 
	[docuser@jenkinslave1 docFolder]$ ls
		file1.txt
	[docuser@jenkinslave1 docFolder]$
	[docuser@jenkinslave1 docFolder]$ sudo vi file1.txt
	[docuser@jenkinslave1 docFolder]$ cat file1.txt
		file created inside the container and line added
		2nd line added from host machine
	[docuser@jenkinslave1 docFolder]$
	
	Nowagain go to the container and check the file , it will be modified.
	
	[docuser@jenkinslave1 ~]$ docker ps -a
		CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES
		32bbd77afebe        docker.io/ubuntu    "/bin/bash"         15 minutes ago      Exited (0) 14 minutes ago                          competent_heisenberg
	[docuser@jenkinslave1 ~]$ docker start 32bbd77afebe
		32bbd77afebe
	[docuser@jenkinslave1 ~]$
	[docuser@jenkinslave1 ~]$ docker exec -it 32bbd77afebe bash
	root@32bbd77afebe:/#
	root@32bbd77afebe:/# cd containerFolder/
	root@32bbd77afebe:/containerFolder# cat file1.txt
		file created inside the container and line added
		2nd line added from host machine
	root@32bbd77afebe:/containerFolder#          
	
	
	
	Priate registry
	========================
	Appart from docker hub we can use our private registry. 
	Docer provide a private registry known as  " registry:2 "
	
	whywe need private registry
	------------------------------
	we can control where we need to store our images.
	we can fully own our image distribution pipeline.
	easily integrate image storage and distribution pipeline 
	int our inhouse development workflow.
	
	
	===================================================================================|
	||eror  /usr/bin/docker-current: Got permission denied while trying to connect to  |
	||	the Docker daemon socket at unix:///var/run/docker.sock:                    |
	||                                                                                 |
	||Slution [ujam@jenkinslave1 ~]$ sudo chmod 666 /var/run/docker.sock               |
	===================================================================================|
	
	Let run the  registry:2  private registry
	[ujam@jenkinslave1 ~]$ docker run -d -p 5000:5000 --restart=always --name privetRepo  registry:2
						or
	[ujam@jenkinslave1 ~]$ docker run -d -p 5000:5000 --restart=always --name privetRepo  -v /mnt/registry:/var/lib/registry  registry:2
			Unable to find image 'registry:2' locally
			Trying to pull repository docker.io/library/registry ...
			2: Pulling from docker.io/library/registry
			486039affc0a: Pull complete                                                                          ba51a3b098e6: Pull complete                                                                          8bb4c43d6c8e: Pull complete                                                                          6f5f453e5f2d: Pull complete                                                                          42bc10b72f42: Pull complete                                                                          Digest: sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7
			Status: Downloaded newer image for docker.io/registry:2
			02b535ce6f190a46b6f78d6493fb061713c80b3377b7bc651472c8aef698e106
	[ujam@jenkinslave1 ~]$
	
	Chek the container list
	
	[ujam@jenkinslave1 ~]$ docker container list
		CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
		02b535ce6f19        registry:2          "/entrypoint.sh /e..."   14 minutes ago      Up 14 minutes       0.0.0.0:5000->5000/tcp   privetRepo
	
	To ush image into private registry the Image name should be
	
	localhost:port/imageName:version
	
	[ujam@jenkinslave1 ~]$ docker images
		REPOSITORY        TAG        IMAGE ID            CREATED             SIZE
		javaapp           v1         e47cbe4c7b4c        3 days ago          488 MB
		
	[ujam@jenkinslave1 ~]$ docker tag javaapp:v1  localhost:5000/javaapp:v1
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$ docker images
		REPOSITORY              TAG      IMAGE ID            CREATED             SIZE
		javaapp                  v1      e47cbe4c7b4c        3 days ago          488 MB
		localhost:5000/javaapp   v1      e47cbe4c7b4c        3 days ago          488 MB	
	
	Nowpush the image into private registry
	
	[ujam@jenkinslave1 ~]$ docker push localhost:5000/javaapp:v1
		The push refers to a repository [localhost:5000/javaapp]
		aa8ecd0ac8e8: Pushed 
		376ca5eb1898: Pushed  
		v1: digest: sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b size: 2209
	[ujam@jenkinslave1 ~]$  
	
	Nowdelete the created image and pull it form private registry
	
	[ujam@jenkinslave1 ~]$ docker rmi localhost:5000/javaapp:v1
		Untagged: localhost:5000/javaapp:v1
		Untagged: localhost:5000/javaapp@sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
	[ujam@jenkinslave1 ~]$	
	
	[ujam@jenkinslave1 ~]$ docker pull localhost:5000/javaapp:v1
		Trying to pull repository localhost:5000/javaapp ...
		v1: Pulling from localhost:5000/javaapp
		Digest: sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
		Status: Downloaded newer image for localhost:5000/javaapp:v1
	[ujam@jenkinslave1 ~]$
	
	[ujam@jenkinslave1 ~]$ docker images
		REPOSITORY                    TAG      IMAGE ID            CREATED             SIZE
		sksumanta/simple_javaapp      v1       e47cbe4c7b4c        3 days ago          488 MB
		javaapp                       v1       e47cbe4c7b4c        3 days ago          488 MB
		localhost:5000/javaapp        v1       e47cbe4c7b4c        3 days ago          488 MB
	
	wha are the images present in private registry
	====================================================
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/_catalog
		{"repositories":["javaapp"]}
	[ujam@jenkinslave1 ~]$     	
	
	her 	http://localhost:5000/v2/_catalog  rest api url given by docker to check what are the image pushed to private registry
	
	
	Howto check the tags/versions of an image present in private repository
	======================================================================================
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/javaapp/tags/list
		{"name":"javaapp","tags":["v1"]}
	[ujam@jenkinslave1 ~]$
	
	Howto get the manifest information
	========================================
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$ curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X GET http://localhost:5000/v2/javaapp/manifests/v1 2>&1 
	
	Themanifest give the inforamtion about the image size ,layers , Docker-Content-Digest ,   etc
	
	
	[ujam@jenkinslave1 ~]$ curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X GET http://localhost:5000/v2/javaapp/manifests/v1 2>&1  | grep -i docker-content-digest
		< Docker-Content-Digest: sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
	[ujam@jenkinslave1 ~]$
	
	Howto delete a tag 
	=====================
	[ujam@jenkinslave1 ~]$ curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X DELETE http://localhost:5000/v2/javaapp/manifests/sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
		* About to connect() to localhost port 5000 (#0)
		*   Trying ::1...
		* Connected to localhost (::1) port 5000 (#0)
		> DELETE /v2/javaapp/manifests/sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b HTTP/1.1
		> User-Agent: curl/7.29.0
		> Host: localhost:5000
		> Accept: application/vnd.docker.distribution.manifest.v2+json
		>
		< HTTP/1.1 405 Method Not Allowed
		< Content-Type: application/json; charset=utf-8
		< Docker-Distribution-Api-Version: registry/2.0
		< X-Content-Type-Options: nosniff
		< Date: Sun, 09 Feb 2020 04:26:00 GMT
		< Content-Length: 78
		<
		{"errors":[{"code":"UNSUPPORTED","message":"The operation is unsupported."}]}
		* Connection #0 to host localhost left intact
	[ujam@jenkinslave1 ~]$  
	
	
	we ill get the below error as " REGISTRY_STORAGE_DELETE_ENABLED=FALSE"	 so we need to enable by 
	chaging its value to "TRUE"
	
	
	Lets set  REGISTRY_STORAGE_DELETE_ENABLED property
	============================================================
	ste-1 -- check container is running or not
	---------
	[ujam@jenkinslave1 ~]$ docker ps
		CONTAINER ID    IMAGE         COMMAND                  CREATED             STATUS              PORTS                    NAMES
		02b535ce6f19    registry:2    "/entrypoint.sh /e..."   8 hours ago         Up 8 hours          0.0.0.0:5000->5000/tcp   privetRepo
		
	ste-2 -- stop the runnig container and remove it
	-------
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$ docker stop 02b535ce6f19
		02b535ce6f19
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$ docker rm 02b535ce6f19
		02b535ce6f19
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$ docker ps
		CONTAINER ID        IMAGE      COMMAND      CREATED     STATUS     PORTS     NAMES
		
	ste-3 -- now enable REGISTRY_STORAGE_DELETE_ENABLED property
	---------
	[ujam@jenkinslave1 ~]$ docker run -d  -p 5000:5000 -e REGISTRY_STORAGE_DELETE_ENABLED=true  --restart=always --name privetRepo registry:2
		40f89e6e94d38a7789574069ebf227221ad581d38e2ebb0676cc594db9163817
	[ujam@jenkinslave1 ~]$ 
	
	ste-4 -- vreify there is no image present in the registry 		 
	-------
	As e have not used volume so images are lost when we removed the container
	
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/_catalog
		{"repositories":[]}
	[ujam@jenkinslave1 ~]$
	
	ste-5 -- lets push an image to the private registry
	--------- 
	[ujam@jenkinslave1 ~]$ docker push localhost:5000/javaapp:v1
		The push refers to a repository [localhost:5000/javaapp]
		aa8ecd0ac8e8: Pushed 
		376ca5eb1898: Pushed 
	
	ste-6 -- check the image present in the registry and verify the tag
	------
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/_catalog
		{"repositories":["javaapp"]}
	[ujam@jenkinslave1 ~]$
	
		
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/javaapp/tags/list
		{"name":"javaapp","tags":["v1"]}
	[ujam@jenkinslave1 ~]$ 	 
	
	ste-7 -- get Docker-Content-Digest  from manifest
	-------
	[ujam@jenkinslave1 ~]$ curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X GET http://localhost:5000/v2/javaapp/manifests/v1 2>&1  | grep -i docker-content-digest
		< Docker-Content-Digest: sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
	[ujam@jenkinslave1 ~]$
	[ujam@jenkinslave1 ~]$  	
		
	ste-8 -- delete the tag from private registry
	--------
	[ujam@jenkinslave1 ~]$ curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X DELETE http://localhost:5000/v2/javaapp/manifests/sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b
		* About to connect() to localhost port 5000 (#0)
		*   Trying ::1...
		* Connected to localhost (::1) port 5000 (#0)
		> DELETE /v2/javaapp/manifests/sha256:59af7ae758eff1de3bcf252a7768a54bb4d6e7eeda414ad3f47ab544103d164b HTTP/1.1
		> User-Agent: curl/7.29.0
		> Host: localhost:5000
		> Accept: application/vnd.docker.distribution.manifest.v2+json
		>
		< HTTP/1.1 202 Accepted
		< Docker-Distribution-Api-Version: registry/2.0
		< X-Content-Type-Options: nosniff
		< Date: Sun, 09 Feb 2020 11:48:11 GMT
		< Content-Length: 0
		<
		* Connection #0 to host localhost left intact
	[ujam@jenkinslave1 ~]$
	
	ste-9 -- check the tag will be delete from the image
	---------
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/javaapp/tags/list
		{"name":"javaapp","tags":null}
	
	[ujam@jenkinslave1 ~]$ curl -X GET http://localhost:5000/v2/_catalog
		{"repositories":["javaapp"]}
	[ujam@jenkinslave1 ~]$               
	
	
	
	howto use vloume for private registry
	==========================================
	docker run -d \
	-p 5000:5000 \
	--restart=always \
	--name privateRepo
	-v  /mnt/privRepo:/var/lib/regRepo \
	registry:2
	
					Install jenkin in docker
				==============================
	[ujm@jenkinslave1 ~]$ docker pull jenkins
	[ujm@jenkinslave1 ~]$ docker inspect jenkins
		"ExposedPorts": {
				"50000/tcp": {},
				"8080/tcp": {}
			},
	[ujm@jenkinslave1 ~]$  docker run -d  --name=jenkinsMaster  -p 8080:8080 -p 50000:50000  -v /jenkins_home:/var/jenkins_home  docker.io/jenkins
		Unable to find image 'jenkins:latest' locally
		Trying to pull repository docker.io/library/jenkins ...
		latest: Pulling from docker.io/library/jenkins
		55cbf04beb70: Downloading 10.54 MB/45.31 MB 
		1607093a898c: Download complete            
		
		
	
				docker compose
			================================
	Usig docker run command we can run a single container. If we to run
	muliple container or all the dependencies container at a time then we 
	nee to use docker compose.
	
	Docer compose is a three step process.
	1- Define your app's environment using  DockerFile so it can be reproduce anywhere
	2- Using docker-compose.yml file we can bring up different app in an environment.
	3- docker-compose  up  or docker-compose  starts and runs your entair app
	
	Insall docker-compose
	------------------------
	[douser@jenkinslave1 ~]$ 
	sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	
	% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
									Dload  Upload   Total   Spent    Left  Speed
	100   617    0   617    0     0    626      0 --:--:-- --:--:-- --:--:--   628
	100 15.4M  100 15.4M    0     0  2347k      0  0:00:06  0:00:06 --:--:-- 3721k
	
	[douser@jenkinslave1 ~]$
	[douser@jenkinslave1 ~]$ uname -s
	Linux
	[douser@jenkinslave1 ~]$ uname -m
	x86_64
	[douser@jenkinslave1 ~]$
	
	Proide the permission to docker-compose folder
	
	[douser@jenkinslave1 ~]$ sudo chmod +x /usr/local/bin/docker-compose
	[suo] password for docuser:
	[douser@jenkinslave1 ~]$
	[douser@jenkinslave1 ~]$
	[douser@jenkinslave1 ~]$ docker-compose --version
	docker-compose version 1.24.0, build 0aa59064
	[douser@jenkinslave1 ~]$
	
	Exmle to run multiple container and run an application  using doker compose
	==============================================================================
	[douser@jenkinslave1 ~]$ mkdir dockerComposeDir
	[douser@jenkinslave1 ~]$
	[douser@jenkinslave1 ~]$ cd dockerComposeDir/
	[douser@jenkinslave1 dockerComposeDir]$ cat app.py
	imprt time
	imprt redis
	fro flask import Flask
	
	app= Flask(__name__)
	cace = redis.Redis(host='redis' , port=6379)
	
	defget_hit_count():
	retries = 5
	while True:
		try:
			return cache.incr('hits')
		except redis.exceptions.ConnectionError as expc:
			if retries == 0:
				raise expc
			retries -= 1
			time.sleep(0.5)
	
	@ap.route('/')
	
	defhello():
	count = get_hit_count()
	return 'hellow world I have seen {} times \n'.format(count)
	
	if _name__ == "__main__":
	app.run(host="0.0.0.0", debug=True)
	
	
	[douser@jenkinslave1 dockerComposeDir]$
	
					
	[douser@jenkinslave1 dockerComposeDir]$ cat installReqPackage.txt
	flask
	redis
	[douser@jenkinslave1 dockerComposeDir]$
	[douser@jenkinslave1 dockerComposeDir]$
	[douser@jenkinslave1 dockerComposeDir]$ cat dockerfile
		FROM python:3.4-alpine
		ADD . /sumanta
		WORKDIR /sumanta
		RUN pip install -r installReqPackage.txt
		CMD ["python" , "app.py"]
	
	[douser@jenkinslave1 dockerComposeDir]$	
	
	[douser@jenkinslave1 dockerComposeDir]$ cat docker-compose.yml
	version: '3'
	services:
	web:
		build: .
		ports:
		- "5000:5000"
	redis:
		image: "redis:alpine"    # this will be image name after docker-compose up
	[douser@jenkinslave1 dockerComposeDir]$
	
	[douser@jenkinslave1 dockerComposeDir]$ docker-compose up -d
	Creting dockercomposedir_redis_1 ... done  
	Creting dockercomposedir_web_1   ... done
	
	If ou want to stop application using docker-compose then use 
	[douser@jenkinslave1 dockerComposeDir]$ docker-compose down
	Stoping dockercomposedir_web_1   ... done 
	Stoping dockercomposedir_redis_1 ... done
	Remving dockercomposedir_web_1   ... done
	Remving dockercomposedir_redis_1 ... done                                                           Removing network dockercomposedir_default
	[douser@jenkinslave1 dockerComposeDir]$
	[douser@jenkinslave1 dockerComposeDir]$ docker ps -a
	CONAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
	[douser@jenkinslave1 dockerComposeDir]$
	
	docer-compose with volume
	==============================
	To o docker-compose with volume modify docker-compose.yml file with volumes option
	[douser@jenkinslave1 dockerComposeDir]$ cat docker-compose.yml
	
	verion: '3'
	serices:
	web:
	build: .
	ports:
		- "5000:5000"
	volumes:
		- .:/sumanta:z
	redis:
	image: "redis:alpine"
	
	[douser@jenkinslave1 dockerComposeDir]$
	
	[douser@jenkinslave1 dockerComposeDir]$ docker-compose up -d
	Stating dockercomposedir_web_1   ... done
	Stating dockercomposedir_redis_1 ... done                 
	[douser@jenkinslave1 dockerComposeDir]$
	[douser@jenkinslave1 dockerComposeDir]$ docker ps -a
	CONAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                    NAMES
	9ba6d964b4d        dockercomposedir_web   "python app.py"          4 minutes ago       Up 29 seconds       0.0.0.0:5000->5000/tcp   dockercomposedir_web_1
	80a9bb4ab97        redis:alpine           "docker-entrypoint..."   15 minutes ago      Up 29 seconds       6379/tcp                 dockercomposedir_redis_1
	[douser@jenkinslave1 dockerComposeDir]$
	
	If e change the content of app.py it will reflet on Browser by doing simple refresh
	
	[douser@jenkinslave1 dockerComposeDir]$ if we want to stop the docker-compose 
	we hould execute docker-compose down 
	
	If ou want to run one of the command for the service then we should execute 
	docer-compose run <service_name>
	[douser@jenkinslave1 dockerComposeDir]$ docker-compose run web
	
	To top docker-compose we can use docker-compose stop 
	
	If ou want to down the entire service and remove the volume then you can use
	docer-compose  down --volumes
	
	
				Docker  run  vs  CMD  vs  ENTRYPOINT
			=================================================
	Run-- Run execute the command in a new layer and create a new image 
	ex--> it often use to install new software packages.
	CMD-- CMD set the default command and parameters which can overwrite 
	fro command line when docker container runs.
	ENTYPOINT -- ENTRYPOINT configure a container that will run as executable.
	
	Runwill execute when we build an image. But the CMd and ENTRYPOINT will execute when 
	we xecute an image.
	
	Layrs of Docker image
	---------------------------
	when docker run a container, it runs an image inside it. This image is usually built by executing 
	docer instructions. It add layers on top of existing image or OS
	Theos distribution is the initial image and every added layer creates a new images.
	
	Shel vs. Exec 
	-----------------
	All the instructions "Run , CMD  , entrypoint " can execute in both shell and Exec form.
	
	synax of shell form -: < instructions > < command >   
	
	synax of Exec form -: < instructions > < executable , "param1" , "param2" ... >
	
	In ase of shell form the command will execute in "/bin/sh " unix shell 
	butin case of exec from the command will executable from our specified unix shell .
	
	ex-> docker file having shell from instruction
	
	[douser@jenkinslave1 dockerInstructions]$
	vi dockerfile
	
		FROM ubuntu
		RUN apt-get update -y
		ENV name="sumanta sahoo"
		ENTRYPOINT echo " hello === $name "  # the instruction 'ENTRYPOINT' is in shell form
	
	[douser@jenkinslave1 dockerInstructions]$
	[douser@jenkinslave1 dockerInstructions]$ docker build -t testshell .  # build an image
	[douser@jenkinslave1 dockerInstructions]$ docker run -t --name testShell testshell  #run the image
		output -->  Hello === sumanta sahoo
	
	vi dockerfile
	
		FROM ubuntu
		RUN apt-get update -y
		ENV name="sumanta sahoo"
		ENTRYPOINT ["/bin/bash" , "-c" , "echo  hello === $name " ]   # the instruction 'ENTRYPOINT' is in exec form
	
	[douser@jenkinslave1 dockerInstructions]$
	[douser@jenkinslave1 dockerInstructions]$ docker build -t testexec .  # build an image
	[douser@jenkinslave1 dockerInstructions]$ docker run -t --name testExec testexec  #run the image
		output -->  Hello === sumanta sahoo
		
	Howto optimize the docker file?
	---------------------------------
	In general how many command we will use in docker file that many layers it will 
	crete. And the size of the docker image will increase as per the no of layers.
	
	To optimize the docker file we can use "and operator" ( that is &&)
	
	ex--> 
			RUN apt-get update && apt-get install -y \ 
					csv \
					git\
					bzr\
					subversion\
					wget
	so here apt-get update && apt-get install will run in one single RUN instruction.
	
	CMDinstruction
	===============
	CMD instruction allows to set a default command, which will execute only when you 
	runcontainer without specifying a command.
	
	If the docker container will run with a command then the default command will be 
	ignred.
	
	If the docker file has more than one CMD instruction then last CMD will take effect.
	
	If CMD is used to provide default arguments for the ENTRYPOINT instruction, both 
	theCMD and ENTRYPOINT instructions should be specified with the JSON array format.
	
	we can execute the CMD instruction in three ways, that is shell form, EXEC form
	andsetting of default parameter for ENTRYPOINT in EXEC form using CMD.
	
	syntax -->  CMD command param1 param2  # shell form
				CMD [executable , param1, param2, ...] # exec from
				CMD [ param1 , param2 , ]   # set the additional default parameters 
	forENTRYPOINT in exec form when we execute the container without commandline arguments.
	
	Exaple of CMD instruction in shell form
	----------------------------------------------------
	[docuser@jenkinslave1 cmdInstruction]$ cat dockerfile
	FROM ubuntu
	RUN apt-get update -y
	CMD echo "reading CMD instruction" # executing in shell form
	
	[docuser@jenkinslave1 cmdInstruction]$
	
	[docuser@jenkinslave1 cmdInstruction]$ docker build -t testcmd1 .   # build image
	
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t --name testCmd1 testcmd1 # run container
			output --> reading CMD instruction
	[docuser@jenkinslave1 cmdInstruction]$
	
	
	Not --> If we pass the command line argument then the defult argument for CMD instruction 
	wil not execute which is present in the dockerfile.
	
	Exaple--> 
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t --name testCmd1 testcmd1 ls  # below is the ls output
	
			bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
			boot  etc  lib   media  opt  root  sbin  sys  usr
	[docuser@jenkinslave1 cmdInstruction]$
	
	Exaple of CMD instruction in exec form
	----------------------------------------------------
	[docuser@jenkinslave1 cmdInstruction]$ cat dockerfile
	FROM ubuntu
	RUN apt-get update -y
	CMD ["/bin/bash", "-c" , "echo reading CMD instruction"] # executing in exec form
	
	[docuser@jenkinslave1 cmdInstruction]$
	
	[docuser@jenkinslave1 cmdInstruction]$ docker build -t testcmd2 .   # build image
	
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t --name testCmd2 testcmd2 # run container
			output --> reading CMD instruction
	[docuser@jenkinslave1 cmdInstruction]$
	
	belw example passing argument from command line
	
	[douser@jenkinslave1 cmdInstruction]$
	[douser@jenkinslave1 cmdInstruction]$ docker run -t --name testCmd2 testcmd2 echo " passing the argument from commandline"
			passing the argument from commandline
	[douser@jenkinslave1 cmdInstruction]$				
	
	Exaple for  setting of default parameter for ENTRYPOINT in EXEC form using CMD
	======================================================================================
	[docuser@jenkinslave1 cmdInstruction]$ cat dockerfile
		FROM ubuntu
		RUN apt-get update -y
		ENTRYPOINT ["/bin/echo", " hellow" ]
		cmd ["world"]
	[docuser@jenkinslave1 cmdInstruction]$    docker build -t cmdtest4 .
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t --name Cmdtest4 cmdtest4
			otuput -->  hellow world
	[docuser@jenkinslave1 cmdInstruction]$
	
	By assing the command line argument we overwrite the default value of CMD.
	
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t --name Cmdtest5 cmdtest4  sumanta
		output --> 	hellow sumanta
	[docuser@jenkinslave1 cmdInstruction]$	
	
	We an also override ENTRYPOINT
	==================================
	docker run -t   --entrypoint "/bin/echo" cmdtest4 
	
	we an override both ENTRYPOINT and CMD 
	============================================
	[docuser@jenkinslave1 cmdInstruction]$ docker run -t   --entrypoint "/bin/echo" --name Cmdtest5 cmdtest4 hi sumanta
		hi sumanta
	[docuser@jenkinslave1 cmdInstruction]$
	
			ONBUILD
		==============
	ONBUILD is applicable for any command in docker file execept 'lable' and 'form'.
	ex -> ONBUILD CMD  javac helloWorld.java
	Whe we user a command with 'ONBUILD' then that command will not execute when we run the 
	docer image. That particular command will execute when we use the image as a base image 
	to reate another image.
	
	Exaple --> 
	
	[docuser@jenkinslave1 dockerOnbuild]$ vi dockerfile
	
		FROM nginx:1.16-alpine
		LABEL Auther="sumanta kumar sahoo"
		WORKDIR /usr/share/nginx/html
		ONBUILD COPY index.html .
	
	[docuser@jenkinslave1 dockerOnbuild]$ docker build -t nginx-parent .
	
		Sending build context to Docker daemon 2.048 kB
		Step 1/4 : FROM nginx:1.16-alpine
		Trying to pull repository docker.io/library/nginx ...
		1.16-alpine: Pulling from docker.io/library/nginx
		4167d3e14976: Pull complete
		d9176111d0ef: Pull complete
		Digest: sha256:5057451e461dda671da5e951019ddbff9d96a751fc7d548053523ca1f848c1ad
		Status: Downloaded newer image for docker.io/nginx:1.16-alpine
		---> 5fad07aba15a
		Step 2/4 : LABEL Auther "sumanta kumar sahoo"
		---> Running in 1de72a4d014e
		---> 71bf2c43129e
		Removing intermediate container 1de72a4d014e
		Step 3/4 : WORKDIR /usr/share/nginx/html
		---> 2bad4febc1f8
		Removing intermediate container 8bf069edd8af
	
		Step 4/4 : ONBUILD copy index.html .    # command will not executed if we run the image
	
		---> Running in f80c22d19537
		---> 010da43e79dd
		Removing intermediate container f80c22d19537
		Successfully built 010da43e79dd
		[docuser@jenkinslave1 dockerOnbuild]$
		[docuser@jenkinslave1 dockerOnbuild]$
	
	[docuser@jenkinslave1 dockerOnbuild]$ docker run -d -p 8181:80 nginx-parent
		510c3215d4fb3a39858a2e9d2647ca780ddbd94cf8d3407a7f4f7d41dc09c657
		
	[docuser@jenkinslave1 dockerOnbuild]$
	[docuser@jenkinslave1 dockerOnbuild]$	ifconfig
				
		eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		inet 192.168.33.97  netmask 255.255.255.0  broadcast 192.168.33.255
		inet6 fe80::a00:27ff:fed2:2dc2  prefixlen 64  scopeid 0x20<link>
		ether 08:00:27:d2:2d:c2  txqueuelen 1000  (Ethernet)
		RX packets 4543  bytes 515168 (503.0 KiB)
		RX errors 0  dropped 0  overruns 0  frame 0
		TX packets 199  bytes 17819 (17.4 KiB)
		TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
	
	nowin the browser type  192.168.33.97:8181 , then we will get the default nginx page.
	
		
	[docuser@jenkinslave1 ]$ mkdir childOnbuild
	[docuser@jenkinslave1 ]$ cd childOnbuild/
	[docuser@jenkinslave1 childOnbuild]$ vi index.html
			<h1> I am studying ONBUILD </h1>
	[docuser@jenkinslave1 childOnbuild]$
	[docuser@jenkinslave1 childOnbuild]$ vi dockerfile
	
		FROM nginx-parent
	
	[docuser@jenkinslave1 childOnbuild]$
	
	[docuser@jenkinslave1 childOnbuild]$ docker build -t nginx-child .
		Sending build context to Docker daemon 3.072 kB
		Step 1/1 : FROM nginx-parent
		# Executing 1 build trigger...
		Step 1/1 : COPY index.html .	# the command is executed which present in nginx-parent image
		---> e242b3e7d405
		Removing intermediate container b60fbe569cd5
		Successfully built e242b3e7d405
	[docuser@jenkinslave1 childOnbuild]$
		
	[docuser@jenkinslave1 childOnbuild]$ docker run -d -p 8282:80 nginx-child
		3f005d6fb2dc362d303b6c1ed92dc42c06a174ff5c3a5065d9de446203aa8052
	
	[docuser@jenkinslave1 childOnbuild]$
		
	if e use http://192.168.33.97:8282/ in browser we will get the new containt 
	
	
			Dockerfile healthcheck
		======================================
	The "healthcheck" is the command use to determine the health of a running container.
	As ell as it helps to find out the services are actually up or not within the container.
	
	Exaple -->
	[docuser@jenkinslave1]$ mkdir  dockerHealthCheck
	[docuser@jenkinslave1]$ cd  dockerHealthCheck
	[docuser@jenkinslave1 dockerHealthCheck]$ ls  -1
		app.py
		dockerfile
		requirement.txt
	[docuser@jenkinslave1 dockerHealthCheck]$
	[docuser@jenkinslave1 dockerHealthCheck]$ cat app.py
		from flask import Flask
	
		app = Flask(__name__)
	
		@app.route("/")
		def hello():
			return "Hello world!!"
	
		if __name__ == "__main__":
			app.run(debug=True,host='0.0.0.0')
	[docuser@jenkinslave1 dockerHealthCheck]$
	
	[docuser@jenkinslave1 dockerHealthCheck]$ cat requirement.txt
		Flask==0.12.2            # this is the sw need to run python program
	[docuser@jenkinslave1 dockerHealthCheck]$
	
	[docuser@jenkinslave1 dockerHealthCheck]$ cat dockerfile
		FROM python:3.6-alpine
		COPY .  /app
		WORKDIR  /app
		RUN  pip install  -r  requirement.txt #install package in docker image using file containt
		CMD ["python" , "app.py"]
	
	[docuser@jenkinslave1 dockerHealthCheck]$
	
	[docuser@jenkinslave1 dockerHealthCheck]$ docker build -t helath_check .
	
	[docuser@jenkinslave1 dockerHealthCheck]$ docker run  -d --rm --name Health_Check_flacsk -p 5000:5000 helath_check
		cb9fb866dae0a02ecc6199c3b3c161c01d97b42009065c993221ab85381f7183
	[docuser@jenkinslave1 dockerHealthCheck]$
	
	whe we open the browser with "http://192.168.33.97:5000/" url we will get the result output.
	
	
	To erform the healthcheck let's modify dockerfile.
	
	[docuser@jenkinslave1 dockerHealthCheck]$ vi dockerfile
		FROM python:3.6-alpine
		COPY .  /app
		WORKDIR  /app
		RUN  apk add curl
		RUN  pip install  -r  requirement.txt #install package in docker image using file containt
	
		# before the CMD command we need to write the below healthcheck command
	
		HEALTHCHECK CMD curl --fail http://192.168.33.97:5000/ || exit 1
	
		CMD ["python" , "app.py"]
	
	Nowbuild the image
	
	[docuser@jenkinslave1 dockerHealthCheck]$ docker build -t doc_health_chk .
	
	Runthe image
	[docuser@jenkinslave1 dockerHealthCheck]$ docker run -d --rm --name docHealthChk -p 5000:5000 d
	
	chek the docker ps output status
	
	[docuser@jenkinslave1 dockerHealthCheck]$ docker ps
		CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS                    NAMES
		1b5b9cebf897        doc_health_chk      "python app.py"     9 minutes ago       Up 9 minutes (unhealthy)   0.0.0.0:5000->5000/tcp   docHealthChk
	[docuser@jenkinslave1 dockerHealthCheck]$
	
	Nowinstpect the image to check the health check log. 
	
	[docuser@jenkinslave1 dockerHealthCheck]$ docker inspect --format='{{ json .State.Health}}' docHealthChk
	
	
				difference between ADD and COPY
			=========================================
	Bot ADD and COPY instructions in dockerfile are use to copy file from a specific location
	to ocker image.
	
	In case of copy we can copy local files and directory into docker image.
	We can create multi-stage builds using COPY instruction.
	
	
	But in case of ADD we can copy local files and directory into docker image
	as ell as we can download file from remote url location into docker image.
	Also by using ADD we can copy local tar or gz into docker image. The ADD instruction automaticaly
	extact the files from the tar or gz file we no need to use unarchive command separetly.
	
	
	Synax
	----------
	ADD  [--chown=<username>:group] <src>...<dest>
	ADD  [--chown=<username>:group] ["<src>",..."<dest>"]
	
	COPY  [--chown=<username>:group] <src>...<dest>
	COPY  [--chown=<username>:group] ["<src>",..."<dest>"]
	
	Exaple 
	------------
	[docuser@jenkinslave1 dockerCopy_Add]$ cat  example.txt  
		this is a local file use
	
	[docuser@jenkinslave1 dockerCopy_Add]$ cat sample.txt
		this is a local file use
	
	[docuser@jenkinslave1 dockerCopy_Add]$ cat dockerfile
		FROM busybox
	
		COPY sample.txt /tmp
	
		ADD example.txt /tmp
	
		CMD ["sh"]
	[docuser@jenkinslave1 dockerCopy_Add]$
	[docuser@jenkinslave1 dockerCopy_Add]$ docker build  -t copyaddtest1 .
	
	[docuser@jenkinslave1 dockerCopy_Add]$ docker run  -it --name copyAddTest1 copyaddtest1 sh
	
	Chek the example using tar file with ADD instruction.
	----------------------------------------------------------
	[docuser@jenkinslave1 dockerCopy_Add]$ tar  -cvzf exampleTarFile.tar.gz ./  # create a tar.gz file
		./
		./example.txt
		./sample.txt
		./dockerfile
	[docuser@jenkinslave1 dockerCopy_Add]$
	[docuser@jenkinslave1 dockerCopy_Add]$ ls  -rtl
		total 16
		-rw-rw-r--. 1 docuser docuser  26 Dec  9 11:03 example.txt
		-rw-rw-r--. 1 docuser docuser  26 Dec  9 11:03 sample.txt
		-rw-rw-r--. 1 docuser docuser  69 Dec  9 12:04 dockerfile
		-rw-rw-r--. 1 docuser docuser 286 Dec 10 11:25 exampleTarFile.tar.gz
	[docuser@jenkinslave1 dockerCopy_Add]$	
	[docuser@jenkinslave1 dockerCopy_Add]$ vi Dockerfile	
		FROM busybox
	
		ADD  exampleTarFile.tar.gz /tmp
	
		CMD ["sh"]
	[docuser@jenkinslave1 dockerCopy_Add]$ docker build  -t add_tar_file .
	[docuser@jenkinslave1 dockerCopy_Add]$ docker run -it --name addTarFile1 add_tar_file sh
		/ # cd /tmp
		/tmp # ls -rtl
		total 12
		-rw-rw-r--    1 1002     1002            26 Dec  9 11:03 example.txt
		-rw-rw-r--    1 1002     1002            26 Dec  9 11:03 sample.txt
		-rw-rw-r--    1 1002     1002            69 Dec  9 12:04 dockerfile
		/tmp #
	Not --> we copied the tar.gz file using ADD instruction but we can see the file has been 
	extacted.
	
	
	Check the example using tar file with COPY instruction.
	----------------------------------------------------------
	[docuser@jenkinslave1 dockerCopy_Add]$ tar  -cvzf exampleTarFile.tar.gz ./  # create a tar.gz file
		./
		./example.txt
		./sample.txt
		./dockerfile
	[docuser@jenkinslave1 dockerCopy_Add]$
	[docuser@jenkinslave1 dockerCopy_Add]$ ls  -rtl
		total 16
		-rw-rw-r--. 1 docuser docuser  26 Dec  9 11:03 example.txt
		-rw-rw-r--. 1 docuser docuser  26 Dec  9 11:03 sample.txt
		-rw-rw-r--. 1 docuser docuser  69 Dec  9 12:04 dockerfile
		-rw-rw-r--. 1 docuser docuser 286 Dec 10 11:25 exampleTarFile.tar.gz
	[docuser@jenkinslave1 dockerCopy_Add]$	
	[docuser@jenkinslave1 dockerCopy_Add]$ vi Dockerfile	
		FROM busybox
	
		COPY  exampleTarFile.tar.gz /tmp
	
		CMD ["sh"]
	[docuser@jenkinslave1 dockerCopy_Add]$ docker build  -t add_tar_file .
	[docuser@jenkinslave1 dockerCopy_Add]$ docker run -it --name addTarFile1 add_tar_file sh
		/ # cd /tmp
		/tmp # ls -rtl
		total 4
		-rw-rw-r--    1 root     root           286 Dec 10 11:25 exampleTarFile.tar.gz
		/tmp #
	
	Not --> we copied the tar.gz file using COPY instruction and we can see the tar.gz file inside
	thedocker image. The file is not unarchive. To unarchive we need to use the instruction inside
	docer file
	
	
	So to perform unarchive we need to write the below docker file.
	[docuser@jenkinslave1 dockerCopy_Add]$ vi Dockerfile
		FROM busybox
	
		COPY  exampleTarFile.tar.gz /tmp/
		WORKDIR /tmp/
		RUN tar -xvzf exampleTarFile.tar.gz .
		CMD ["sh"]
		~          
	[docuser@jenkinslave1 dockerCopy_Add]$ docker build  -t copy_tar_file .
	
	[docuser@jenkinslave1 dockerCopy_Add]$ docker run -it --name copyTarFile9 copy_tar_file sh
		/tmp # cd  /tmp
		/tmp # ls -rtl
		total 16
		-rw-rw-r--    1 1002     1002            26 Dec  9 11:03 example.txt
		-rw-rw-r--    1 1002     1002            26 Dec  9 11:03 sample.txt
		-rw-rw-r--    1 1002     1002            69 Dec  9 12:04 dockerfile
		-rw-rw-r--    1 root     root           286 Dec 10 11:25 exampleTarFile.tar.gz
		/tmp #
		
	Dowload file from URL using ADD instruction
	----------------------------------------------------
	[douser@jenkinslave1 dockerCopy_Add]$ vi dockerfile
	FROM busybox
	WORKDIR /tmp/
	ADD https://downloads.apache.org/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz /tmp/
	
	CMD ["sh"]
	[douser@jenkinslave1 dockerCopy_Add]$ docker build  -t add_url_tar_file .
	[douser@jenkinslave1 dockerCopy_Add]$ docker run -it --name addUrlTarFile3 add_url_tar_file sh
	/tmp # cd  /tmp
	/tmp # ls -rtl
	total 11176
	-rw-------    1 root     root      11442169 Dec  3 12:42 apache-tomcat-9.0.41.tar.gz
	/tmp #
	
	muli-stage builds
	---------------------------
	The multi-stage builds, you use multiple FROM statements in your Dockerfile. 
	Eac FROM instruction can use a different base, and each of them begins a new stage of the build.
	Youcan selectively copy artifacts from one stage to another, leaving behind 
	eveything you don’t want in the final image. 
	
	exaple -->
	-------------
	FROM golang:1.7.3
	WORKDIR /go/src/github.com/alexellis/href-counter/
	RUN go get -d -v golang.org/x/net/html  
	COPY app.go .
	RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
	
	FROM alpine:latest  
	RUN apk --no-cache add ca-certificates
	WORKDIR /root/
	COPY --from=0 /go/src/github.com/alexellis/href-counter/app .
	CMD ["./app"]  
	
	Howto create space by removing the docker images
	=========================================================
	
	1 --> docker container prune
	2 --> docker system prune
	3 --> docker rmi $(docker images) ---- > to remove all images 
	
	
	Howto push Docker images to remote nexus private repository 
	===================================================================
	Ste 1 --> 
	Login to nexus "http://192.168.33.97:8081/"   ( user nexusUsr     pass  suman345 )
	click on setting icon in nexus
	click on "repositories" option
	click on "create repositories" --> select "Docker hosted" --> give Name , enable online 
	to llow incoming request , select http checkbox , give a port no ex 8085
	Enable/Allow "docker V1 API" to interact with this Repository.
	Blob storage could be "default"
	Allow strict content type validation so that it will validate all content uploaded to this repository.
	ste 2  --> 
	Lets pull an image.
		[docuser@jenkinslave1 ~]$ docker pull alpine
		[docuser@jenkinslave1 ~]$ docker images | grep -i alpine
	REPSITORY                         TAG                 IMAGE ID            CREATED             SIZE		
	docer.io/alpine                   latest              b14afc6dfb98        4 days ago          5.57 MB
	
	ste 3 --> To push the image we should rename the docker image. Image name should follow the user name.
	
	[docuser@jenkinslave1 ~]$ docker tag  docker.io/alpine  192.168.33.97:8085/alpine:v1
	[docuser@jenkinslave1 ~]$ docker images | grep -i alpine
	REPSITORY                         TAG                 IMAGE ID            CREATED             SIZE		
	192168.33.97:8085/alpine          v1                  b14afc6dfb98        4 days ago          5.57 MB
	
	ste 4 --> create a demone.json under /etc/docker
	[docuser@jenkinslave1 ~]$ cd  /etc/docker
	[docuser@jenkinslave1 docker]$
	[docuser@jenkinslave1 docker]$ sudo vi daemon.json
			{
		"insecure-registries" : ["192.168.33.97:8085"]
		}
	ste 5 --> restart docker
	[docuser@jenkinslave1 docker]$ sudo service docker restart
	ste 6 --> login to nexus to push the docker image to nexus repositories
	
	[docuser@jenkinslave1 docker]$ docker login -u nexusUsr  -p suman345  192.168.33.97:8085
		Login Succeeded
	[docuser@jenkinslave1 docker]$
	
	ste 7 --> now push the image 
		
	[docuser@jenkinslave1 docker]$ docker push 192.168.33.97:8085/alpine
		The push refers to a repository [192.168.33.97:8085/alpine]
		f4666769fca7: Pushed
		v1: digest: sha256:25f5332d060da2c7ea2c8a85d2eac623bd0b5f97d508b165f846c7d172897438 size: 528
	[docuser@jenkinslave1 docker]$
	
	ste 8 --> now go the nexus url and click browse -- components -- myDockerRepo ( this is the repo name)
	we can see our image in this repositories.
	
	
	
	
	
	===================================================================
	
	download a LST version of os image -- inspcat the image bn  
	
	devwill create docker image 
	or e will take the packge and create docker image
	
	if e will create image will consider the application contenarization
	
	is t a web application --- how to hit the port to access the app on browser
	we re accessing any DB --- "    "
	
	howmuch resource consum by the application ( memori , cpu , disk )
	
	howto consider memori consuption for a container
	
	Theapplication is monolethic or microservice application
	
	=====================================================================	
	
	
	
	
	
Download a redis image and run the container
	docker run -d --name redis redis:3.2.0
	docker ps -a
	
Build the docker image using dockerfile
	docker build -t dockerapp:v3 .
	docker images
	
Run the docker image linking the redis container
	docker run -d -p 5055:5000 --link redis dockerapp:v3
	
	
How the docker link works
--------------------------------

In case of docker linking we no need to expose the source container


	when we open the dockerapp:v3 container  and see /etc/hosts
we will find the IP_address of redis container in that file

	To verify if we check 
		docker inspect redis_container_id | grep -i IP 
	we will find the same ip_address

